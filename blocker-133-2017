#!/usr/bin/perl

use v5.10;
use strict;
use diagnostics;
use warnings;
use Getopt::Std;
use Net::OpenSSH;
use Net::Telnet;
use Net::IP::Match::Regexp qw( create_iprange_regexp match_ip );
use Text::Diff;
use IPC::Open3;

my @asnum = (
    # for AS in $( whois AS-MAILRU | awk '$1~/^members:/ { print $2 }'); do echo ${AS}; whois ${AS} | egrep "^(role|as-name|org-name)"; done
    'AS47764',  # Limited liability company Mail.Ru
    'AS51286',  # Limited liability company Mail.Ru
    'AS60476',  # Limited liability company Mail.Ru
    'AS60863',  # Limited liability company Mail.Ru
    'AS49988',  # Mail.Ru LLC // ok.ru
    'AS21051',  # Limited liability company Mail.Ru

    # for AS in $( whois AS-VKONTAKTE | awk '$1~/^members:/ { print $2 }'); do echo ${AS}; whois ${AS} | egrep "^(role|as-name|org-name)"; done
    'AS47541',  # VKONTAKTE-SPB-AS
    'AS47542',  # VKONTAKTE-MSK-CDN-AS
    'AS28709',  # VKONTAKTE-REGIONAL-CDN

    # for AS in $( whois AS-YANDEX | awk '$1~/^members:/ { print $2 }'); do echo ${AS}; whois ${AS} | egrep "^(role|as-name|org-name)"; done
    'AS13238',  # YANDEX LLC
    'AS43247',  # "Yandex.Money" NBCO LLC
    'AS202611', # Yandex Cloud Technologies LLC
    'AS207207', # Yandex.OFD LLC

    'AS197068', # QRATOR (drweb.ru)

    'AS200107'  # KL-EXT (kaspersky.ru)
);

my $fhostnames		= 'hostnames';
my $fhostip		= 'hostip';
my $fhostipdiff		= 'hostipdiff';
my $fhostiphostname	= 'hostip.hostname';

my %opts;
getopts('u:p:r:o', \%opts);
unless (defined $opts{r} ) {
    say "-rrouter";
    exit 254;
}
unless (defined $opts{u} ) {
    say "-uusername";
    exit 254;
}
unless (defined $opts{p} ) {
    say "-ppassword";
    exit 255;
}

my (%hostip, %hostip_jun, $fh, $fho);

if (defined $opts{o} || (-w $fhostip && -s $fhostip==0)) {
    say "Отримуємо список reject-мереж та ip-адрес з бордера…";
    foreach my $netw (getJunOSRejectStaticRoute($opts{r}, $opts{u}, $opts{p})) {
        my ($net, $mask);
        if ($netw =~ m{/}) {
            ($net, $mask) = $netw =~ m{(\d+\.\d+\.\d+\.\d+)/(\d+)?};
        } else {
            ($net, $mask) = ($netw, 32 );
        }
say "($net, $mask)";
        $hostip_jun{$net} = 32 unless defined $hostip_jun{$net};
        $hostip_jun{$net} = $mask if $mask<$hostip_jun{$net};
    }
} else {
    say "Зчитуємо з файлу '$fhostip' список reject-мереж та ip-адрес…";
    open $fho,"<:utf8", $fhostip or die "Can't open file $fhostip :$!\n";
    while (<$fho>) {
        chomp;
        next if /^#/;
        next if /^$/;

        my ($net, $mask);
        if (m{/}) {
            ($net, $mask) = m{(\d+\.\d+\.\d+\.\d+)/(\d+)?};
        } else {
            ($net, $mask) = ($_, 32 );
        }
say "($net, $mask)";
        $hostip_jun{$net} = 32 unless defined $hostip_jun{$net};
        $hostip_jun{$net} = $mask if $mask<$hostip_jun{$net};
    }
    close $fho;
}

say "Формуємо список мереж для заданих AS-num…";
foreach my $asnet (@asnum) {
    my @networks = getRTRejectStaticRoute($asnet);
    foreach my $netw ( @networks ) {
        if ($netw !~ m{/32$}) {
            my ($net, $mask) = $netw =~ m{(\d+\.\d+\.\d+\.\d+)/(\d+)};
say "($net, $mask)";
            $hostip{$net} = 32 unless defined $hostip{$net};
            $hostip{$net} = $mask if $mask<$hostip{$net};
        }
    }

}

say "Формуємо regexp для списку мереж…";
my (@ipnet_jun, @ipnet);
foreach my $net ( keys %hostip_jun ) {
    next if $hostip_jun{$net} == 32;
    push @ipnet_jun, sprintf("%s/%s", $net, $hostip_jun{$net});
}
foreach my $net ( keys %hostip ) {
    push @ipnet, sprintf("%s/%s", $net, $hostip{$net});
}
my $ipnet_jun_re = create_iprange_regexp( @ipnet_jun );
my $ipnetre = create_iprange_regexp( @ipnet );

say "Формуємо список ip-адрес для заданих імен хостів і додаємо їх, якщо вони не потрапляють у мережі AS-num…";
open $fh,"<:utf8", $fhostnames or die "Can't open file $fhostnames :$!\n";
open $fho,">>:utf8", $fhostiphostname or die "Can't open file $fhostiphostname :$!\n";
while (<$fh>) {
    next unless /^.+$/;
    next if /^\s*#/;
    chomp;
    my @hosts = getHostIP($_);
    foreach my $ip (@hosts) {
        unless (match_ip($ip, $ipnetre)) {
            unless (match_ip($ip, $ipnet_jun_re)) {
                $hostip{$ip} = 32;
                print $fho sprintf("%s %s\n", $ip, $_);
            }
        }
    }
}
close $fho;
close $fh;
system(sprintf("sort -u %s | sort -u -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n > /tmp/%s", $fhostiphostname, $fhostiphostname."~" ));
system(sprintf("mv /tmp/%s %s", $fhostiphostname."~", $fhostiphostname ));

say "Додаємо мережі та хости у список мереж…";
foreach my $netw ( keys %hostip_jun ) {
    if (defined $hostip{$netw}) {
        if ($hostip{$netw}>$hostip_jun{$netw}) {
            $hostip{$netw} = $hostip_jun{$netw};
        }
        next;
    }
    unless (match_ip($netw, $ipnetre)) {
        $hostip{$netw} = $hostip_jun{$netw};
    }
}

say "Формуємо списки для порівняння…";
my (@netlist_old, @netlist_new);
foreach my $netw ( sortipv4( keys %hostip_jun ) ) { push @netlist_old, sprintf("%s/%s", $netw, $hostip_jun{$netw}); }
foreach my $netw ( sortipv4( keys %hostip ) ) { push @netlist_new, sprintf("%s/%s", $netw, $hostip{$netw}); }
my ($netlist_old, $netlist_new) = ( join("\n", @netlist_old), join("\n", @netlist_new) );

say "Проводимо порівняння…";
my $diff = diff \$netlist_old, \$netlist_new;

say "Прибираємо 'зайві' /32…";
foreach my $ip ( sortipv4( keys %hostip_jun ) ) {
    next if $hostip_jun{$ip}<32;
    if (match_ip($ip, $ipnet_jun_re)) {
         $diff .= sprintf("-%s/32\n", $ip);
    }
}

if (length($diff)>0) {
    say "Вносимо зміни до конфігурації…";
    setJunOSConfig($diff, $opts{r}, $opts{u}, $opts{p});

    open $fh,">:utf8", $fhostipdiff or die "Can't open file $fhostipdiff :$!\n";
    print $fh $diff;
    close $fh;
}

if (defined $opts{o} || length($diff)>0) {
    say "Записуємо нову версію списку заблокованих мереж та адрес…";
    open $fh,">:utf8", $fhostip or die "Can't open file $fhostip :$!\n";
    print $fh join("\n", getJunOSRejectStaticRoute($opts{r}, $opts{u}, $opts{p}));
    close $fh;
}

say "";

#map {
#    say sprintf("%s/%s", $_, $hostip{$_});
#} sortipv4( keys %hostip );

exit;

sub setJunOSConfig {
    my $diff = shift;
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;

    my $ret = "";
    foreach my $line ( split("\n", $diff) ) {
        next unless $line =~ /^[+-]/;
        $line =~ s/;$//;
        if ($line =~ /^-/) {
            $line =~ s/^-//;
#            $ret .= sprintf("delete routing-options static route %s\n", $line);
            $ret .= sprintf("delete policy-options prefix-list 133-2017 %s\n", $line);
        } else {
            $line =~ s/^\+//;
#            $ret .= sprintf("set routing-options static route %s reject\n", $line);
            $ret .= sprintf("set policy-options prefix-list 133-2017 %s\n", $line);
        }
    }
    doCmd( $router, $user, $pass, $ret );
    return $ret;
}

sub getJunOSRejectStaticRoute {
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;

    my $ssh = Net::OpenSSH->new( $router, user => $user, password => $pass, master_opts => [-o => "StrictHostKeyChecking=no"] );
    $ssh->error && die "Couldn't establish SSH connection: ". $ssh->error;
#    my @ret = split("\n", join("", jCmd($ssh, sprintf("show configuration routing-options static | display set | match reject\$ | except 0.0.0.0/0 | no-more")) ));
#    map { s,^[^0-9]+,,; s,\s+reject$,,; } @ret;
    my @ret = split("\n", join("", jCmd($ssh, sprintf("show configuration policy-options prefix-list 133-2017 | no-more")) ));
    undef $ssh;

    return sortipv4(@ret);
}

sub getRTRejectStaticRoute {
    my $as = shift if @_;
    return "" unless $as;
    my @ret;
    open (RT, 'echo "@rtconfig printPrefixRanges \"%p/%m\n\" filter '.$as.'" | /usr/local/bin/rtconfig -protocol ripe -config junos |') || die "Failed run rtconfig: $!\n";
    while (<RT>) {
        next unless /^[0-9]/;
        chomp;
        push @ret, $_;
    }
    close RT;
    return @ret;
}

sub getHostIP {
    my $host = shift if @_;
    my @ret;

    return @ret unless $host;

    open3(*WHOIS_HOST_IN, *WHOIS_HOST_OUT, *WHOIS_HOST_ERR, sprintf("dig %s -t a \@8.8.8.8 +nottl", $host));
    close(WHOIS_HOST_IN);
    my @outwhoishost = <WHOIS_HOST_OUT>;
    my @errwhoishost = <WHOIS_HOST_ERR>;
    close(WHOIS_HOST_OUT);
    close(WHOIS_HOST_ERR);

    foreach my $line ( @outwhoishost ) {
        next unless $line =~ /^$host\.\s+IN\s+A\s+/;
        chomp $line;
        my (undef, undef, undef, $ip) = split(" ", $line);
        push @ret, $ip;
    }

    return @ret;
}

sub jCmd {
    my $ssh = shift if @_;
    my $cmd = shift if @_;
    my @list = $ssh->capture($cmd);
    $ssh->error && die "remote '$cmd' command failed: " . $ssh->error;
    return @list;
}

sub doCmd {
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;
    my $cmdin = shift if @_;

    sub diessh {
        map { print; } @_ if @_;
        die;
    }

    return unless length($cmdin)>0;

#   open STDERR, '>', "/dev/null";
    my $ssh = Net::OpenSSH->new( $router, user => $user, password => $pass, master_opts => [-o => "StrictHostKeyChecking=no"] );
    $ssh->error && die "Couldn't establish SSH connection: ". $ssh->error;
    my ($pty, $pid) = $ssh->open2pty();
    my $session = Net::Telnet->new( -fhopen => $pty, -prompt => '/.*[>#]\s+$/', -timeout=>60 );
    $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
    $session->cmd(String=>'configure private');
    my $cmdc = 0;
    foreach my $cmd ( split "\n", $cmdin ) {
        $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
        $session->cmd(String=>$cmd);
        say "".$cmd;
        $cmdc++;
        sleep 1;
    }
    $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
    $session->cmd(String=>'commit and-quit', Timeout=>10*$cmdc);
    $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
    $session->close;
    waitpid($pid, 0);
    undef $session;
    undef $ssh;
#   open STDERR, '>', "/dev/stderr";
}

sub sortipv4 {
    my @ret = @_;
    map { s/^[^\d]+//; s/[^\d]+$//; s,/32$,,; } @ret;
    @ret = map { join(".",unpack("C5")) } sort map { pack("C5",split /[.\/]/) } @ret;
    map { s,\.(\d+)$,/$1,; s,/0$,,; } @ret;
    return @ret;
}
