#!/usr/bin/perl

use v5.10;
use strict;
use diagnostics;
use warnings;
use Getopt::Std;
use Net::OpenSSH;
use Net::Telnet;
use Net::IP::Match::Regexp qw( create_iprange_regexp match_ip );
use Text::Diff;
use IPC::Open3;

my @asnum = (
    'AS47541', # VKONTAKTE-SPB-AS
    'AS47764', # mailru-as
    'AS13238', # Yandex
    'AS43247', # YAMONEY-AS
    'AS197068', # QRATOR (drweb.ru)
    'AS200107'  # KL-EXT (kaspersky.ru)
);

my $fhostnames		= 'hostnames';
my $fhostip		= 'hostip';
my $fhostipdiff		= 'hostipdiff';
my $fhostiphostname	= 'hostip.hostname';

my %opts;
getopts('u:p:r:', \%opts);
unless (defined $opts{r} ) {
    say "-rrouter";
    exit 254;
}
unless (defined $opts{u} ) {
    say "-uusername";
    exit 254;
}
unless (defined $opts{p} ) {
    say "-ppassword";
    exit 255;
}

my (%hostip, %hostipj, $fh, $fho);

say "Отримуємо список reject-мереж  та ip-адрес з бордера…";
foreach my $netw (getJunOSRejectStaticRoute($opts{r}, $opts{u}, $opts{p})) {
    if ($netw =~ m{/}) {
        my ($net, $mask) = $netw =~ m{(\d+\.\d+\.\d+\.\d+)/(\d+)?};
        $hostipj{$net} = 32 unless defined $hostipj{$net};
        $hostipj{$net} = $mask if $mask<$hostipj{$net};
    } else {
        $hostipj{$netw} = 32;
    }
}

say "Формуємо список мереж для заданих AS-num…";
foreach my $asnet (@asnum) {
    my @networks = getRTRejectStaticRoute($asnet);
    foreach my $netw ( @networks ) {
        if ($netw !~ m{/32$}) {
            my ($net, $mask) = $netw =~ m{(\d+\.\d+\.\d+\.\d+)/(\d+)};
            $hostip{$net} = 32 unless defined $hostip{$net};
            $hostip{$net} = $mask if $mask<$hostip{$net};
        }
    }

}

say "Формуємо regexp для списку мереж…";
my @ipnet;
foreach my $net ( keys %hostip ) {
    push @ipnet, sprintf("%s/%s", $net, $hostip{$net});
}
my $ipnetre = create_iprange_regexp( @ipnet );

say "Формуємо список ip-адрес для заданих імен хостів і додаємо їх, якщо вони не потрапляють у мережі AS-num…";
open $fh,"<:utf8", $fhostnames or die "Can't open file $fhostnames :$!\n";
open $fho,">>:utf8", $fhostiphostname or die "Can't open file $fhostiphostname :$!\n";
while (<$fh>) {
    next unless /^.+$/;
    next if /^\s*#/;
    chomp;
    my @hosts = getHostIP($_);
    foreach my $ip (@hosts) {
        unless (match_ip($ip, $ipnetre)) {
            $hostip{$ip} = 32;
            print $fho sprintf("%s %s\n", $ip, $_);
        }
    }
}
close $fho;
close $fh;
system(sprintf("sort -u %s | sort -u -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n > /tmp/%s", $fhostiphostname, $fhostiphostname."~" ));
system(sprintf("mv /tmp/%s %s", $fhostiphostname."~", $fhostiphostname ));
say "";

#map {
#    say sprintf("%s/%s", $_, $hostip{$_});
#} sortipv4( keys %hostip );

exit;

sub getJunOSRejectStaticRoute {
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;

    my $ssh = Net::OpenSSH->new( $router, user => $user, password => $pass, master_opts => [-o => "StrictHostKeyChecking=no"] );
    $ssh->error && die "Couldn't establish SSH connection: ". $ssh->error;
    my @ret = split("\n", join("", jCmd($ssh, sprintf("show configuration routing-options static | display set | match reject\$ | no-more")) ));
    map { s,^[^0-9]+,,; s,\s+reject$,,; } @ret;
    undef $ssh;

    return sortipv4(@ret);
}

sub getRTRejectStaticRoute {
    my $as = shift if @_;
    return "" unless $as;
    my @ret;
    open (RT, 'echo "@rtconfig printPrefixRanges \"%p/%m\n\" filter '.$as.'" | /usr/local/bin/rtconfig -protocol ripe -config junos |') || die "Failed run rtconfig: $!\n";
    while (<RT>) {
        next unless /^[0-9]/;
        push @ret, $_;
    }
    close RT;
    return @ret;
}

sub getHostIP {
    my $host = shift if @_;
    my @ret;

    return @ret unless $host;

    open3(*WHOIS_HOST_IN, *WHOIS_HOST_OUT, *WHOIS_HOST_ERR, sprintf("dig %s -t a \@8.8.8.8 +nottl", $host));
    close(WHOIS_HOST_IN);
    my @outwhoishost = <WHOIS_HOST_OUT>;
    my @errwhoishost = <WHOIS_HOST_ERR>;
    close(WHOIS_HOST_OUT);
    close(WHOIS_HOST_ERR);

    foreach my $line ( @outwhoishost ) {
        next unless $line =~ /^$host\.\s+IN\s+A\s+/;
        chomp $line;
        my (undef, undef, undef, $ip) = split(" ", $line);
        push @ret, $ip;
    }

    return @ret;
}

sub jCmd {
    my $ssh = shift if @_;
    my $cmd = shift if @_;
    my @list = $ssh->capture($cmd);
    $ssh->error && die "remote '$cmd' command failed: " . $ssh->error;
    return @list;
}

sub sortipv4 {
    my @ret = @_;
    map { s/^[^\d]+//; s/[^\d]+$//; s,/32$,,; } @ret;
    @ret = map { join(".",unpack("C5")) } sort map { pack("C5",split /[.\/]/) } @ret;
    map { s,\.(\d+)$,/$1,; s,/0$,,; } @ret;
    return @ret;
}
