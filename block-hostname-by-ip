#!/usr/bin/perl

use v5.10;
use strict;
use warnings;
use Data::Dumper; $Data::Dumper::Indent = 1; $Data::Dumper::Terse = 1;
use Getopt::Std;
use IPC::Open3;
use Sort::Key::IPv4;
use Text::Diff;
use Net::OpenSSH;
use Net::Telnet;

my $fhostnames = 'hostnames';
my $fhostip = 'hostip';
my $fhostipdiff = 'hostipdiff';

my %opts;
getopts('u:p:r:', \%opts);
unless (defined $opts{r} ) {
    say "-rrouter";
    exit 254;
}
unless (defined $opts{u} ) {
    say "-uusername";
    exit 254;
}
unless (defined $opts{p} ) {
    say "-ppassword";
    exit 255;
}

my (%hostip, %hostipold, $fh, $hostip, $hostipold);

open $fh,"<:utf8", $fhostip or die "Can't open file $fhostip :$!\n";
while (<$fh>) {
    next unless /^\d+\.\d+\.\d+\.\d+/;
    chomp;
    $hostipold{$_}++;
    $hostipold.=sprintf("%s\n", $_);
}
close $fh;

open $fh,"<:utf8", $fhostnames or die "Can't open file $fhostnames :$!\n";
while (<$fh>) {
    next unless /^.+$/;
    chomp;
    my @hosts = getHostIP($_);
    foreach my $rr (@hosts) {
        $hostip{$rr}++;
    }
}
close $fh;

open $fh,">>:utf8", $fhostip or die "Can't open file $fhostip :$!\n";
foreach my $ip ( map { join(".",unpack("C4")) } sort map { pack("C4",split /\./) }  keys %hostip) {
    print $fh $ip, "\n";
    $hostip.=sprintf("%s\n", $ip);
}
close $fh;
system("sort -u -t . -k 1,1n -k 2,2n -k 3,3n -k 4,4n ".$fhostip." > ".$fhostip.".~");
system("mv ".$fhostip.".~ ".$fhostip);

open $fh,">:utf8", $fhostipdiff or die "Can't open file $fhostipdiff :$!\n";
my $diff = diff \$hostipold, \$hostip;
print $fh $diff;
close $fh;

setJunOSConfig($diff, $opts{r}, $opts{u}, $opts{p}) if length($diff)>0;

exit;

sub getHostIP {
    my $host = shift if @_;
    my @ret;

    return @ret unless $host;

#    open3(*WHOIS_HOST_IN, *WHOIS_HOST_OUT, *WHOIS_HOST_ERR, sprintf("host %s", $host));
    open3(*WHOIS_HOST_IN, *WHOIS_HOST_OUT, *WHOIS_HOST_ERR, sprintf("dig %s -t a \@8.8.8.8 +nottl", $host));
    close(WHOIS_HOST_IN);
    my @outwhoishost = <WHOIS_HOST_OUT>;
    my @errwhoishost = <WHOIS_HOST_ERR>;
    close(WHOIS_HOST_OUT);
    close(WHOIS_HOST_ERR);

    foreach my $line ( @outwhoishost ) {
#        next unless $line =~ /has address/;
        next unless $line =~ /^$host\.\s+IN\s+A\s+/;
        chomp $line;
        my (undef, undef, undef, $ip) = split(" ", $line);
        push @ret, $ip;
    }

    return @ret;
}

sub setJunOSConfig {
    my $diff = shift;
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;

    my $ret = "";
    foreach my $line ( split("\n", $diff) ) {
        next unless $line =~ /^[+-]/;
        $line =~ s/;$//;
        if ($line =~ /^-/) {
            $line =~ s/\s+\w+$//;
            $line =~ s/^-//;
#            $line = sprintf("delete routing-options static route %s\n", $line);
#            $ret .= $line;
        } else {
            $line =~ s/^\+//;
            $line = sprintf("set routing-options static route %s reject\n", $line);
            $ret .= $line;
        }
    }
    doCmd( $router, $user, $pass, $ret );
    return $ret;
}

sub doCmd {
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;
    my $cmdin = shift if @_;

    sub diessh {
        map { print; } @_ if @_;
        die;
    }

#   open STDERR, '>', "/dev/null";
    my $ssh = Net::OpenSSH->new( $router, user => $user, password => $pass, master_opts => [-o => "StrictHostKeyChecking=no"] );
    $ssh->error && die "Couldn't establish SSH connection: ". $ssh->error;
    my ($pty, $pid) = $ssh->open2pty();
    my $session = Net::Telnet->new( -fhopen => $pty, -prompt => '/.*[>#]\s+$/', -timeout=>60 );
    $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
    $session->cmd(String=>'configure private');
    my $cmdc = 0;
    foreach my $cmd ( split "\n", $cmdin ) {
        $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
        $session->cmd(String=>$cmd);
        say "".$cmd;
        $cmdc++;
        sleep 1;
    }
    $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
    $session->cmd(String=>'commit and-quit', Timeout=>10*$cmdc);
    $session->waitfor(-match => $session->prompt, -errmode => "return") || diessh "wait failed: " . $session->lastline;
    $session->close;
    waitpid($pid, 0);
    undef $session;
    undef $ssh;
#   open STDERR, '>', "/dev/stderr";
}
