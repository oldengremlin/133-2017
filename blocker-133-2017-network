#!/usr/bin/perl

use v5.10;
use strict;
use warnings;
use Getopt::Std;
use Net::OpenSSH;
use Net::IP::Match::Regexp qw( create_iprange_regexp match_ip );

my @asnum = (
    'AS47541', # VKONTAKTE-SPB-AS
    'AS47764', # mailru-as
    'AS13238', # Yandex
    'AS43247', # YAMONEY-AS
    'AS197068', # QRATOR (drweb.ru)
    'AS200107'  # KL-EXT (kaspersky.ru)
);
my ($rr_rt, %ipnet) = ("");

my %opts;
getopts('u:p:r:', \%opts);
unless (defined $opts{r} ) {
    say "-rrouter";
    exit 254;
}
unless (defined $opts{u} ) {
    say "-uusername";
    exit 254;
}
unless (defined $opts{p} ) {
    say "-ppassword";
    exit 255;
}


foreach my $asnet (@asnum) {
    my $rt_rn = getRTRejectStaticRoute($asnet);
    map {
	my (undef, undef, undef, undef, $net) = split(" ");
	$ipnet{$net}++;
    } split("\n", $rt_rn);
    $rr_rt .= $rt_rn;
}
my $ipnetre = create_iprange_regexp( keys %ipnet );
foreach my $ip ( getJunOSRejectStaticRoute($opts{r}, $opts{u}, $opts{p})) ) {
    
}

say $rr_rt;
say $ipnetre;
say $hostipold;

exit;

sub getJunOSRejectStaticRoute {
    my $router = shift if @_;
    my $user = shift if @_;
    my $pass = shift if @_;

    my $ssh = Net::OpenSSH->new( $router, user => $user, password => $pass, master_opts => [-o => "StrictHostKeyChecking=no"] );
    $ssh->error && die "Couldn't establish SSH connection: ". $ssh->error;
    my @ret = split("\n", join("", jCmd($ssh, sprintf("show configuration routing-options static | display set | match reject\$ | no-more")) ));
    undef $ssh;

    return sortipv4(@ret);
}

sub getRTRejectStaticRoute {
    my $as = shift if @_;
    return "" unless $as;
    my $ret;
    open (RT, 'echo "@rtconfig printPrefixRanges \"set routing-options static route %p/%m reject\n\" filter '.$as.'" | rtconfig -protocol ripe -config junos |') || die "Failed run rtconfig: $!\n";
    while (<RT>) {
        s/^\s*//;
        next unless /^set\s+/;
        $ret .= $_;
    }
    close RT;
    return $ret;
}

sub jCmd {
    my $ssh = shift if @_;
    my $cmd = shift if @_;
    my @list = $ssh->capture($cmd);
    $ssh->error && die "remote '$cmd' command failed: " . $ssh->error;
    return @list;
}

sub sortipv4 {
    my @ret = @_;
    map { s/^[^\d]+//; s/[^\d]+$//; s,/32$,,; } @ret;
    @ret = map { join(".",unpack("C5")) } sort map { pack("C5",split /[.\/]/) } @ret;
    map { s,\.(\d+)$,/$1,; s,/0$,,; } @ret;
    return @ret;
}
